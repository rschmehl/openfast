.. _ts_input_files:

Input Files

TurbSim reads text input files to set the parameters required for the
program to execute. Most of the parameters are contained in the primary
TurbSim input file; certain options may require parameters from
secondary input files. All of these files are described below.

TurbSim assumes that parameters are located on specific lines in its
input file(s), so do not add or remove lines from the sample input files
included in the archive. None of the input parameters are case
sensitive.

Each line in the input file that contains a parameter also contains its
name, a description, and the units for that parameter. The names of the
parameters are provided for reference, but TurbSim does not read those
names from the input file. Note that other programs or scripts that
generate TurbSim input files, however, can and *do* use these parameter
names.

Primary Input File

The parameters in TurbSim’s primary input file are divided into several
sections (discussed below). The text of an example TurbSim input file is
included in Appendix **A** of this guide.

Runtime Options

The Runtime Options section initializes the pseudorandom number
generator (pRNG) and tells TurbSim what type of output to generate.
Appendix **C** contains a flow chart showing the function of the input
parameters from this section. Users can choose any combination of output
types listed in this section, but at least one output file must be
generated to successfully run the code. The **Output Files** section of
this guide provides more complete descriptions of these file types.

Echo: Echo input data to <RootName>.ech [-]

This input parameter is used for debugging purposes. When “true”, the
program will echo the variables to a file with a “.ech” extension each
time the program reads a line from the input file. When “false”, the
“.ech” file is not created.

RandSeed1: The First Random Seed [-]

This input parameter is used in conjunction with the next parameter,
*RandSeed2*; it tells TurbSim how to initialize the pRNG. This random
seed must be an integer between –2147483648 and 2147483647 (inclusive).

The random numbers generated by the pRNG are used to create random
phases (one per frequency per grid point per wind component) for the
velocity time series. When the pRNG is initialized in the same way
(i.e., *RandSeed1* and *RandSeed2* are not changed), the user can
reproduce the same random phases between runs, which is useful in
comparing the effects of changes to other input parameters. Random
numbers also are used to generate some default input values and the
superimposed coherent structures for the non-IEC spectral models.

RandSeed2: The Second Random Seed or pRNG to Use [-]

This input parameter indicates which of three available pRNGs to use.
This value is a second random seed or the strings “RNSNLW” or “RanLux.”
Using RanLux is recommended because initial tests show that it seems to
be the best behaved of the three generators.

If *RandSeed2* is a random seed, it must be an integer between
–2147483648 and 2147483647 (inclusive). TurbSim then uses the two seeds
to initialize the intrinsic pRNG—which uses two separate congruential
generators together to produce a period of about 10\ :sup:`18`. This
intrinsic pRNG is based on an algorithm developed by Pierre L’ecuyer
[18] and is identical to the one found in SNwind.

If *RandSeed2* is the string “RNSNLW,” TurbSim generates random numbers
using the algorithm found in SNLWIND and SNLWIND-3D. It is initialized
with only one seed.

If *RandSeed2* is the string “RanLux,” TurbSim uses Lüscher’s level 3
“Luxury Pseudorandom Numbers” [19], [20]. This pRNG is based on a
subtract-and-borrow algorithm with a period on the order of about
10\ :sup:`171` and is modified by throwing numbers away to destroy
correlations. This pRNG is initialized with only one seed.

WrBHHTP: Write Binary Hub-Height Turbulence Parameters? [T/F]

This parameter must be either “true” or “false.” Setting this output
option to “true” generates a binary file with a “.bin” extension. The
file contains time series of wind data and turbulence parameters from
the center grid point at hub height (HH).

WrFHHTP: Write Formatted Hub-Height Turbulence Parameters? [T/F]

This “true” or “false” parameter is similar to the previous parameter,
*WrBHHTP*. When set to “true,” it generates a file containing time
series of wind data and turbulence parameters from the center grid point
at hub height. This file is formatted (i.e., human-readable text) and
has a “.dat” extension.

WrADHH: Write AeroDyn Hub-Height Files? [T/F]

This “true” or “false” parameter provides an option to generate time
series in the AeroDyn v13 hub-height format; this format is called
“uniform wind” in InflowWind. These files have an “.hh” extension.

WrADFF: Write AeroDyn Full-Field Files? [T/F]

This parameter must be either “true” or “false.” It provides the option
to generate binary, full-field (FF) time series in a format designed to
be read by InflowWind (formerly AeroDyn). This format is unique to
TurbSim and provides an encoding scheme designed to give maximum
resolution. It contains all the information necessary to decode the time
series in one file, but it is not compatible with GH Bladed. These files
have a “.bts” extension.

WrBLFF: Write Bladed-Style Full-Field Files? [T/F]

Like the *WrADFF* parameter, the *WrBLFF* “true” or “false” parameter
also provides the option to generate binary, full-field (FF) time series
in a format designed to be read by InflowWind (formerly AeroDyn). This
format is compatible with GH Bladed\ *,* but in some cases the encoding
scheme provides less resolution than the files generated by *WrADFF.*
These files have a “.wnd” extension.

|image3|\ WrADTWR: Generate AeroDyn Tower Points? [T/F]

The *WrADTWR* “true” or “false” parameter determines whether TurbSim
generates binary tower time series, which contain points in a line at
the tower centerline from the bottom of the rectangular grid to the
ground. Figure 4 shows an example of the location of tower points. If a
user chooses to output FF time series in the format unique to TurbSim
using *WrADFF* (“.bts” files), these tower points are added to the FF
binary output file. Otherwise, a separate tower-points binary file is
created using an encoding scheme similar to the Bladed-style FF file
format used in the “.wnd” files (generated with parameter *WRBLFF*).
This extra binary file for the tower points has a “.twr” extension.

WrFMTFF: Write Formatted Full-Field Files? [T/F]

This “true” or “false” output option determines whether TurbSim
generates FF time series in SNLWIND-3D human-readable format. One file
is generated for each wind component, and the three files have
extensions “.u,” “.v,” and “.w\ *,*\ ” respectively. Please note that
InflowWind cannot read these text files.

WrACT: Write Coherent Turbulence Files? [T/F]

This “true” or “false” parameter indicates whether coherent turbulence
should be generated, creating time-step files in AeroDyn v13 format. The
coherent turbulence feature is not available with the IEC or TIDAL
spectral models. For the other spectral models, the feature is available
only when the gradient Richardson number (input parameter *RICH_NO*) is
greater than –0.05. The mean wind speed at the top of the coherent
structure also must be greater than the mean wind speed at the bottom of
the coherent structure. The Coherent Turbulence Scaling Parameters
section of the input file discusses how to set the coherent structure
location.

The coherent turbulence time-step files, which have a “.cts” extension,
are intended to be superimposed on background FF turbulence files. As a
result, TurbSim also creates binary FF time series (*WrBLFF* or
*WrADFF*) when a coherent turbulence time-step file is requested. If no
FF time series format has been specified, TurbSim creates a GH
Bladed-style binary FF file (*WrBLFF* “.wnd” file). For more information
on using these “.cts” files, see the Using Coherent Turbulence Time-Step
Files with AeroDyn v13 section in this guide.

Clockwise: Does the Turbine Rotate Clockwise? [T/F]

This true” or “false” parameter is a flag to indicate whether the
turbine rotates in a clockwise direction when looking downwind. This
feature determines the order in which the horizontal grid points of the
Bladed-style FF files are written (the parameter *WrBLFF* must be
“true”). Because InflowWind also reads the Bladed-style FF files based
on the direction of rotation, this flag does not affect the results when
used with InflowWind. This parameter probably is useful only for
comparing FF results between older versions of Bladed *and
InflowWind-based simulators.*

ScaleIEC: Scale IEC Turbulence to Exact Standard Deviations? [0, 1, or
2]

The *ScaleIEC* parameter is a switch to tell how to scale the
time-domain velocity output of the IEC spectral models and is applicable
to only the IECKAI and IECVKM spectral models. For numerical reasons,
the turbulence intensity (TI) of the IEC spectral models—without this
scaling—usually is slightly less than the specified value. Increasing
the time series length and/or decreasing the size of the time step
results in values closer to the specified TI. Different random seeds
produce a Gaussian distribution of TI in the longitudinal wind
component, due to the spatial coherence. To get the exact specified
value of TI, the time series are multiplied by a scaling factor
determined by the ratio of the target to the actual calculated standard
deviation.

When *ScaleIEC* is set to “0,” no scaling takes place in the time
domain. The result is the variation in TI discussed above. When the
*ScaleIEC* switch has a value of “1,” the time series at each simulated
point use the same scaling factor with a different factor for each wind
component. Those three scaling factors (one each for *u*, *v*, and *w*)
are determined so that the standard deviations in wind speed (and thus
TI) at the hub point are the exact value specified for the
*AnalysisTime-*\ length time series that is generated. The TI at the
other simulated points will vary. When *ScaleIEC* is “2,” the time
series at each simulated point in space is scaled independently (i.e.,
each point and each component has its own scaling factor) so that the TI
is the exact specified value at *each* point. This scaling method alters
the coherence between points. Table 3 summarizes the valid input values.

Turbine/Model Specifications

The Turbine/Model Specifications section of the TurbSim input file
determines the size and shape of the grid where time series is
generated. It also determines the time/frequency content of the
resulting time series and sets the mean flow angles. Appendix **C**
contains a flow chart showing the function of the input parameters from
this section.

NumGrid_Z: Number of Vertical Grid Points [-]

This input parameter is the number of grid points to generate in the
vertical direction. It must be an integer greater than 1. Unlike SNwind,
which accepted only even numbers, TurbSim allows both even and odd
grid-point sizes. TurbSim always generates a point at the hub,
regardless of where the other grid points are located. (Note that this
“extra” hub point is not contained the in binary FF files generated when
*WrBLFF* or *WrADFF* are set.)

NumGrid_Y: Number of Horizontal Grid Points [-]

This parameter indicates the number of grid points in the horizontal
direction, and it must be an integer greater than 1. If *NumGrid_Y* is
an odd number, points fall along the undeflected tower centerline.

TimeStep: Time Step [s]

The *TimeStep* parameter is the time step in seconds (i.e., ). It is set
to 0.05 seconds in the sample input files, and that value is recommended
for most simulations. The time step determines the maximum frequency, ,
used in the computation of the inverse FFT:

(1)

AnalysisTime: Length of Analysis [s]

The *AnalysisTime* parameter is the length in seconds of the data to be
analyzed (i.e., *t*\ :sub:`max`). This number dictates the frequencies
which are used to generate the output time series. The following
equations relate *AnalysisTime* to the frequency, *f*, and the number of
frequencies, *NumFreq*:

(2)

(3)

It is recommended that *AnalysisTime* be at least 600 seconds. To speed
up the inverse FFT computations, TurbSim might add a few extra time
steps to ensure that the number of analysis time steps is a product of
small prime numbers. Extra time steps also are added if the length of
the output time series is less than the *AnalysisTime* (see the
discussion of the *UsableTime* parameter below).

UsableTime: Usable Time Series Length [s]

This parameter is the usable length (in seconds) of the data to output.
This number differs slightly from the actual amount of data that TurbSim
outputs. Because InflowWind requires that there be data both upwind and
downwind of the tower in case the turbine is yawed, it mandates that
there be enough data in the FF files to shift the data to ensure that
the turbine resides entirely within the wind-data domain. When
*UsableTime* is input as a number, TurbSim adds the amount of time equal
to the grid width divided by the mean HH wind speed, , to the requested
amount of usable time:

(4)

The analysis time must be at least as large as the output time:

(5)

If necessary, TurbSim increases *AnalysisTime* to satisfy this
relationship.

To output all of the *AnalysisTime* time series without adding the
additional output time, enter the string “ALL”. When *UsableTime* is
“ALL”, the output file is periodic in time (the period is equal to the
*AnalysisTime*), which allows the wind file to be repeated for the extra
amount of time required for startup transitions and the small amount of
time required in case the turbine is yawed.

HubHt: Turbine Hub Height [m]

The *HubHt* parameter is hub height of the turbine for which the inflow
is being generated. TurbSim uses the metric system so enter the value in
meters. This parameter is used as a reference height for determining the
grid location.

GridHeight: Height of the Grid [m]

This parameter is the distance (in meters) between the top and bottom of
the grid. The top of the grid is assumed to be aligned with the top of
the rotor disk (see **Figure 5**), and because all points of the grid
must be above ground level, .

When choosing a value for *GridHeight*, keep in mind that InflowWind
does not allow any part of the blade—including all system
displacements—to lie outside the FF grid. The grid height must be large
enough to encompass the entire rotor disk of FF files. See the parameter
*GridWidth* for further discussion.

GridWidth: Width of the Grid [m]

This parameter is the width of the grid in meters. The rotor is assumed
to be centered horizontally on the grid. If you are generating FF files
for FAST simulations, the grid width—like the height—must be large
enough to ensure that no part of the blade lies outside the grid, even
when the system is displaced.

TurbSim assumes that the diameter of the rotor disk is the smaller of
the *GridHeight* and *GridWidth* values. Because InflowWind must
interpolate within the grid for any point at which it needs wind speeds
(i.e., InflowWind cannot extrapolate), *GridHeight* and *GridWidth*
should be larger than the rotor diameter. In fact, AeroDyn warns users
if the grid width and height are not at least 10% larger than the rotor
diameter. For turbines that move a lot during simulation (e.g., floating
wind turbines), the grid might have to be even larger.

As pictured in Figure 5, the hub is in the horizontal center of the
grid, and the turbine hub height plus assumed rotor radius determines
the top of the grid.

   |Example grids|

   Height = Width Height > Width Height < Width

Figure . Example grid and rotor placements: the circles pictured here
are the rotor diameters assumed by TurbSim; the actual rotor diameter(s)
will be smaller than pictured

VFlowAng: Mean Vertical Flow Angle [°]

This parameter is the mean vertical angle of the wind, which is constant
across the entire grid. Enter the angle in degrees, and do not exceed
45° in magnitude. A positive value means that the wind is blowing
uphill; a negative value indicates that the wind is blowing downhill.
See *HFlowAng* and Figure 6 for more details.

HFlowAng: Mean Horizontal Flow Angle [°]

This parameter is the mean horizontal (crosswise) angle of the wind in
degrees. In all cases except the GP_LLJ model, the horizontal flow angle
is constant across the entire grid. For the GP_LLJ model, which
introduces direction shear with height, *HFlowAng* is the horizontal
angle at hub height.

The mean flow angles *VFlowAng* and *HFlowAng* are used to rotate the
wind from its alignment with the mean flow to the inertial reference
frame. Users should be cautious, however, because InflowWind—in its
implementation of Taylor’s frozen turbulence hypothesis—marches FF grids
through the turbine along the positive X axis (or Propagation Direction)
at the mean hub-height wind speed, without regard to the flow angles
used in TurbSim (see Figure 6). This could give strange results if the
mean flow angles are not small (for example, if *HFlowAng* = 180°, the
grids move through the turbine in the opposite direction the wind is
blowing). We recommend setting the propagation direction in InflowWind
or using a yaw error in the turbine simulation rather than using the
*HFlowAng* parameter and using only small angles (e.g., less than 10°)
for *VFlowAng*.

|image5|

|image6|

|image7|

Figure . Example of TurbSim grids as implemented in InflowWind: (a) The
inertial frame coordinate systems and planes “marching” along positive
*X*, regardless of flow angles, (b) wind field with both flow angles 0°,
(c) the same wind field with *VFlowAng = *\ 8° and *HFlowAng* = 15°

Meteorological Boundary Conditions

The Meteorological Boundary Conditions section of the TurbSim input file
sets the spectral model to simulate, determines the mean wind speeds,
and sets the boundary conditions for the spectral models defined in the
IEC standards. Appendix **C** contains flow charts showing the function
of the input parameters from this section.

TurbModel: Turbulence Model [-]

The *TurbModel* parameter tells TurbSim which spectral model it should
use. Enter the six‑character input value of the desired spectral model.
Valid values are found in Table 4. For more information on these models,
see the **Spectral Models** section in this document.

UserFile: Name of the User Spectra or Time-Series Input File [-]

The *UserFile* parameter tells TurbSim the name of the input file that
contains user-defined spectra inputs or user time-series input data. If
*UserFile* contains a relative path, that path will be considered
relative to the primary TurbSim input file. *UserFile* is unused if
*TurbModel* is not *TIMESR* or *USRINP*. See sections “Input File for
User-Defined Spectra” and “Input File for User-Defined Time Series”
(below) for details on the formats of these input files.

IECstandard: IEC Standard [-]

This input parameter tells TurbSim which IEC standard to use. Enter “1”
to use the scaling from the IEC 61400‑1 [21] standard or enter “2” or
“3” to use the scaling from the IEC 61400‑2 (small wind turbine) [22] or
‑3 (offshore wind turbine) [23] standards. To use the scaling parameters
from the second edition of the IEC 61400‑1 standard [24], follow the
input with the string “‑ED2” (i.e., “1‑ED2”). Likewise, to use the
scaling parameters from IEC 61400‑1, 3\ :sup:`rd` ed. [**21**], input
the string “1‑ED3”. If the 61400‑1 edition number is not specified,
TurbSim uses the scaling from the third edition of IEC 61400‑1 for the
Kaimal model and scaling from the standard’s second edition for the von
Karman model (which is not defined in the newer edition). This input
parameter is used only if the spectral model is IECKAI or IECVKM.

IECturbc: IEC Turbulence [%]

The *IECturbc* parameter tells TurbSim what turbulence intensity you
want to use with the IEC Kaimal or von Karman spectral models. Input
values of “A,” “B,” or “C” correspond to the standard IEC categories of
turbulence characteristics, with “A” being the most turbulent. Figure 7
contains the relationship between wind speed and standard deviation for
the standard IEC categories and turbulence types. You can also specify
the TI in percent instead of choosing the turbulence categories. In this
case, the standard deviation of the longitudinal wind speed, , is
calculated using the following equation:

(6)

If you use the NWTCUP spectral model and enter the string “KHTEST” for
the *IECturbc* parameter, TurbSim creates a test wind field that can be
used to see the effects of a KH billow. With this test function, TurbSim
overrides the inputs for Richardson number (0.02); power-law coefficient
(0.3); and billow type, size, and location. An LES-type billow centered
on the rotor disk is scaled so that the billow achieves a bandwidth of
at least 25 Hz and so that the expected maximum coherent turbulent
kinetic energy (CTKE), defined as

(7)

is at least 30 m\ :sup:`2`/s:sup:`2`. This billow lasts at least half of
the usable length of the output time series, and starts a quarter of the
way through the time series. An example of KHTEST is presented in
**Figure 8**.

The *IECturbc* parameter is not used for any other spectral model.

|image8|

|image9|

IEC_WindType: IEC Turbulence Model [-]

This parameter indicates which IEC wind model will be used. Valid
entries, which are found in Table 5, include the Normal Turbulence Model
(NTM), Extreme Turbulence Model (ETM), and Extreme Wind Speed Model
(EWM) using the 10-minute average wind speed with a recurrence period of
1 year or 50 years. Note that the EWM scaling parameters in TurbSim are
valid only for 10-minute simulations. The definitions of these models
and of the wind turbine classes can be found in the IEC 61400‑1 standard
(3rd ed.) [21]. If the IECturbc parameter was specified as a percentage
instead of as a standard turbulence category, the wind model must be
“NTM.” This input is used only with the IEC spectral models.

ETMc: Extreme Turbulence Model Parameter c [m/s]

The *ETMc* input parameter is the value of the variable *c* in the
equation for the longitudinal component standard deviation, , in the ETM
(see Eq. 19 in section 6.3.2.3 of IEC 61400‑1 3\ :sup:`rd` ed. [21]):

(8)

The values for the variables and —defined respectively as the expected
value of turbulence intensity and 20% of the reference wind-speed
average—are determined by the wind turbine class. Enter a value for *c*
in meters per second, or enter “default” for TurbSim to use
*c = *\ 2 m/s, as defined in the standard\ *.* This parameter is used
only with the Extreme Turbulence Model (i.e., when
*IEC_WindType *\ = \ *x*\ ETM).

WindProfileType: Type of Wind Profile [-]

The WindProfileType parameter tells TurbSim how to calculate the mean
wind profile. Valid entries are found in Table 6. Users can enter the
string “default” here for TurbSim to pick a wind profile based on the
spectral model. The default values are listed in Table 7. Please see the
**Velocity and Direction Profiles** section of this guide for more
details about the different wind profile types. The “H2L” velocity
profile must always be used with, and only with, the TIDAL spectral
model.

Table . Valid *WindProfileType* Values

================= ================================================================================================
*WindProfileType* Description
PL                Power-law wind profile
LOG               Diabatic (logarithmic) wind profile; not valid with KHTEST or with EWM or ETM wind types
H2L               Logarithmic velocity profile for MHK models (TIDAL). Not valid with other values of *TurbModel.*
JET               Low-level jet wind profile, valid only with GP_LLJ model
IEC               Power-law profile on the rotor disk; logarithmic profile elsewhere
API               API (Frøya) wind profile, based on 1-hr mean wind speed at 10 m above sea level
USR               User-defined velocity profile, values are read from a table in *ProfileFile* and interpolated.
TS                Valid only with the “TIMESR” *TurbModel*
Default           Uses a default. See Table 7.
================= ================================================================================================

Table . Default Inputs for *WindProfileType*

================ =====================================================================
*TurbModel*      Default *WindProfileType*
GP_LLJ           JET
TIDAL            H2L
API              API
TIMESR           TS when time series for more than one point are entered; PL otherwise
All other models IEC
================ =====================================================================

ProfileFile: Name of the file containing input profiles [-]

The *ProfileFile* parameter tells TurbSim the name of the input file
that contains user-defined profiles for wind speed and direction when
*WindProfileType* is “USR” and for standard deviation and length-scale
profiles when *TurbModel* is “USRVKM”. If *ProfileFile* contains a
relative path, that path will be considered relative to the primary
TurbSim input file. See the “Input file for User-Defined Profiles”
section of this document for further details.

RefHt: Reference Height [m]

The *RefHt* parameter specifies the height (in meters) of the
corresponding reference wind speed (parameter *URef*). This parameter
enables users to specify the mean wind speed at a height other than the
hub height. TurbSim uses this reference height and wind speed with the
wind profile type to calculate the HH mean wind speed. The reference
height also is used with *URef* and the surface roughness (parameter
*Z0*) to compute default input values for parameters *UStar* and *ZI*.

URef: Reference Wind Speed [m/s]

The *URef* parameter is the mean streamwise wind speed at the reference
height. It is the mean value over the entire *AnalysisTime* length of
the simulation of the *u-*\ component wind speed; however, when the API
spectral model is used, *URef* must be the 1-hr mean wind speed
regardless of the value of *AnalysisTime*. *URef* must be a positive
value in units of meters per second. This value is not used for any of
the extreme wind speed models (EWMs). If you are using the “USR” or “TS”
*WindProfileType*, the *URef* input is ignored and is instead calculated
at the *RefHt* using the profile data contained in *ProfileFile*.

If you use “JET” for the *WindProfileType* parameter, you can enter the
string “default” here for TurbSim to calculate a default wind speed in
two steps: (1) TurbSim calculates the maximum speed of the jet wind
profile, , based on the jet height, *ZJetMax,* and a random variate
(shown in **Figure 9**) then (2) it calculates the wind speed at *RefHt*
using along with parameters *ZJetMax*, *RICH_NO,* and *UStar*. The
calculations of the low-level jet wind speed profile are discussed
further in the **Velocity and Direction Profiles** section of this
guide.

If you are using the “TIMESR” turbulence model, you can also enter
“default” for *URef*. Doing so will set *URef* equal to the mean wind
speed calculated at the *RefPtID* point (specified in the input file for
user-defined time series)\ *.* It will also override *RefHt* to be the
height of the *RefPtID* point.

ZJetMax: Height of the Jet [m]

The *ZJetMax* parameter is the height in meters of the low-level jet.
Enter the approximate height at which the low-level jet wind profile
reaches its maximum wind speed, or enter the string “default” to have
TurbSim calculate a jet height. The default height is a function of
parameters *RICH_NO* and *Ustar* with a random component based on LLLJP
measurements. The default height—without the random component—is plotted
in **Figure 10**. *ZJetMax*, which must be a value between 70 m and
490 m, is used to calculate the mean wind speed and direction profiles.
It is used only when *WindProfileType* is “JET.”

|image10|\ |image11|

PLExp: Power-Law Exponent [-]

The *PLExp* parameter is used to compute the mean *u*-component wind
speeds across the rotor disk when *WindProfileType* is “IEC” or “PL.” It
is the exponent used to define the power-law wind profile,

(9)

where z is the height above ground level. The exponent can be positive,
negative, or zero (for no shear). Enter the string “default” to have
TurbSim use a default value based on the specified spectral model, as
shown in Table 8. If KHTEST is specified for parameter *IECturbc*, the
*PLExp* parameter is overwritten to 0.3.

Z0: Surface Roughness Length [m]

The surface roughness length, *Z0*, is the last parameter in this
section. This length—a measure of the roughness of the surface
terrain—is the extrapolated height at which the mean wind speed becomes
zero in a neutral atmosphere, assuming a logarithmic vertical wind
profile:

(10)

Enter the length in meters, or enter the string “default” to have
TurbSim use a default value based on the specified spectral model. The
default values are listed in **Table 8**. This parameter is not used for
the TIDAL spectral model.

Non-IEC Meteorological Boundary Conditions

If you have specified either the Kaimal or von Karman spectral model,
TurbSim does not use the values in this section of the input file. The
other (non-IEC) spectral models may require the additional
meteorological boundary conditions contained in this section. All of the
inputs in this section, with the exception of the gradient Richardson
number, can be replaced with the string “default.” Appendix **C**
contains flow charts showing the function of the input parameters from
this section and how the default values are chosen.

Latitude: Site Latitude [°]

The first parameter in this section is the site latitude in degrees. The
latitude is used only to calculate a Coriolis term in the default mixing
layer depth (parameter *ZI*). The magnitude of the latitude must be
between 5° and 90°; the default value is 45°.

RICH_NO: Gradient Richardson Number [-]

The *RICH_NO* parameter is the turbine-layer vertical stability given by
the dimensionless gradient Richardson number, which is defined as

(11)

In this equation, *g* is the gravitational acceleration, *z* is the
height above ground, and *u* is the wind speed. The variable represents
potential temperature, which is calculated using the mean absolute air
temperature, *T*, and atmospheric pressure, *p*:

(12)

The *RICH_NO* parameter is used to calculate the velocity spectra and
the JET and LOG wind profiles, scale coherent structures, and determine
default values for many input parameters.

Enter zero for neutral conditions, a negative value for unstable
conditions, or a positive number for stable atmospheric conditions. The
GP_LLJ and NWTCUP models limit this input to . If “KHTEST” is specified
for parameter *IECturbc*, the *RICH_NO* parameter is overwritten to
0.02. The *RICH_NO* parameter does not accept the value “default.” The
*RICH_NO* parameter is not used for the TIDAL spectral model.

UStar: Rotor-Disk Average Friction Velocity [m/s]

The parameter *UStar* is the friction or shear velocity, , averaged over
the rotor disk:

(13)

where the prime quantities indicate the fluctuating (zero-mean)
longitudinal (*u*) and vertical (*w*) wind components at *n\ p*
measurement points on the rotor disk. The GP_LLJ model, which scales the
velocity spectra with *local* friction velocities ( values varying with
height), assumes that *UStar* is the average friction velocity of three
points on the profile: one at the hub, one at the top of the rotor, and
one at the bottom of the rotor.

*UStar* is used to scale the velocity spectra of non-IEC spectral
models, to scale the JET and H2L mean velocity profiles, and to
calculate the default values of many input parameters. Enter *UStar* in
units of meters per second or enter “default” to have TurbSim calculate
an appropriate value. The default value for the TIDAL model is
*UStar *\ = 0.05 \ *URef*. For non-hydro spectral models (i.e., all but
TIDAL), the default value is calculated using the diabatic (near the
surface), which is predicted by Panofsky and Dutton’s modified
logarithmic profile [25] using

(14)

where is a function that depends on the *RICH_NO* stability parameter.
The relationship between *RICH_NO* and , normalized by *URef*, at
*RefHt =* 80 m is plotted in Figure 11. The relationship between and the
default *Ustar* is shown in Figure 12.

If “default” is entered for the reference wind speed, *Uref*, the string
“default” *cannot* be entered for the *UStar* parameter, because the
default values for the two parameters are interdependent.

|image12|\ |image13|

ZI: Depth of the Mixing Layer [m]

The parameter *ZI* is the depth of the mixing layer (in meters). This
parameter scales the velocity spectra in unstable atmospheric conditions
and is not used for stable atmospheric conditions. The default mixing
layer depth is calculated using

(15)

where  rad/s is the Earth’s angular speed of rotation. This equation
combines the work of Dutton et al. [26] with the ESDU [27]. This
parameter is not used for the TIDAL, TIMESR, or USRINP spectral models.

PC_UW: Average u′w′ Reynolds Stress at the Hub [m:sup:`2`/s:sup:`2`]

The *PC_UW* parameter is the desired average *u′w′* Reynolds stress (in
m\ :sup:`2`/s:sup:`2`) at the simulated hub point. It is used in
conjunction with the next two inputs, parameters *PC_UV* and *PC_VW*, to
create some correlation between the wind-speed components.

TurbSim modifies the *v*- and *w*-component wind speeds (for non-IEC
models only) by computing a linear combination of the time series of the
three independent wind-speed components to obtain the mean Reynolds
stresses *PC_UW*, *PC_UV*, and *PC_VW* at the hub point. The linear
combinations are computed for each point, *j*, using the equations

(16)

The three variables are coefficients chosen to generate the desired
Reynolds stresses for the correlated wind components at the hub:

(17)

Because this method affects the frequency domain somewhat, we have
placed the following limit on the coefficients: . This limit can cause
the actual hub Reynolds stresses to differ from the desired values.

Enter the string “default” for TurbSim to compute an appropriate
Reynolds stress for *PC_UW*. The default value for the TIDAL model is
The default value for the SMOOTH model is the same as that for the
WF_UPW and WF_07D models: . The default value for the WF_14D model has
the same magnitude as the SMOOTH model, but is positive 1% of the time
(randomly). The magnitudes of the defaults for the NWTCUP and GP_LLJ
models are functions of *UStar*, *RICH_NO*, height, mean hub-height wind
speed, and shear across the rotor disk. The signs of the defaults are
determined randomly, with the probability that *PC_UW* is negative
increasing with the magnitude of the default. Users can also enter the
string “none” to set and disable the correlation between the *u* and *w*
components. The USRINP and TIMESR models use “none” for their default
values.

PC_UV: Average u′v′ Reynolds Stress at the Hub [m:sup:`2`/s:sup:`2`]

The *PC_UV* parameter is the desired average *u′v′* Reynolds stress (in
m\ :sup:`2`/s:sup:`2`) at the simulated hub point. It is used in
conjunction with the parameters *PC_UW* and *PC_VW* to create
cross-component correlation. See the discussion after parameter *PC_UW*
for details of the correlation.

To set and disable the correlation between the *u* and *v* components,
enter the string “none.” Users also can enter the string “default” if
you would like TurbSim to compute a default value for *PC_UV*. The
magnitudes of the defaults for site-specific models (GP_LLJ, NWTCUP,
WF_UPW, WF_07D, and WF_14D) are functions of *UStar, RICH_NO,* height,
mean hub-height wind speed, and shear across the rotor disk. The signs
of the defaults are determined randomly. The default for the SMOOTH and
TIDAL models is “none.”

PC_VW: Average v′w′ Reynolds Stress at the Hub [m:sup:`2`/s:sup:`2`]

The *PC_VW* parameter is the desired average *v′w′* Reynolds stress (in
m\ :sup:`2`/s:sup:`2`) at the simulated hub point. It is used in
conjunction with the parameters *PC_UW* and *PC_UV* to create
cross-component correlation. See the discussion after parameter *PC_UW*
for details.

Users can enter the string “none” to set and disable the correlation
between the *v* and *w* components. To have TurbSim compute a default
value for *PC_VW*, enter the string “default.” The magnitudes of the
defaults for site-specific models are functions of *UStar*, *RICH_NO*,
height, mean hub-height wind speed, and shear across the rotor disk. The
signs of the defaults are determined randomly. The default for the
SMOOTH and TIDAL models is “none.”

Spatial Coherence Parameters

This section of the input file tells TurbSim how the spatial coherence
should be modeled. See the “Spatial Coherence Models” section of this
document for details on the four available spatial coherence models.

SCMod1: Spatial Coherence Model for the u-Component Velocity [-]

The *SCMod1* parameter tells TurbSim what coherence model to use for the
*u*-component wind speed. Valid values are “GENERAL”, “IEC”, “API”,
“NONE”, or “default”. The default values are listed in Table 9.

SCMod2: Spatial Coherence Model for the v-Component Velocity [-]

The *SCMod2* parameter tells TurbSim what coherence model to use for the
*v*-component wind speed. Valid values are “GENERAL”, “IEC”, “NONE”, or
“default”. The default values are listed in Table 9.

SCMod3: Spatial Coherence Model for the w-Component Wind Speed [-]

The *SCMod3* parameter tells TurbSim what coherence model to use for the
*w*-component wind speed. Valid values are “GENERAL”, “IEC”, “NONE”, or
“default”. The default values are listed in Table 9.

IncDec1: Spatial Coherence for the u-Component Wind Speed [-,
m\ :sup:`-1`]

The *IncDec1* parameter defines the spatial coherence decrement, *a*,
and offset parameter\ *, b*, for the *u*-component wind speed (*K = u*)
when *SCMod1* is GENERAL or IEC. These two values are used to define the
degree of spatial coherence between points on the grid using the
definition

(18)

where *r* is the distance between points *i* and *j*, *f* is the cyclic
frequency, *CohExp* is the coherence exponent input parameter (which is
0 for the IEC coherence model), *z\ m* is the mean height of points *i*
and *j*, and is the mean wind speed, defined differently for the two
spatial coherence models. Please see the Spatial Coherence Models
section of this document for more information.

The *IncDec1* decrement\ *,* *a*, must be a positive number. Users can
enter “default” or *both* the *a* and *b* coherence parameters in
quotation marks on the same line. For example, “10.0  0.1E-02” uses a
coherence decrement of *a *\ = 10.0 and an offset parameter of
*b *\ = 0.1E-02 m\ :sup:`-1`. Omitting the quotation marks around the
two input parameters causes TurbSim to use *b* = 0.

The default *a* parameter for the *u*-component is for the SMOOTH,
USRINP, TIMESR, and TIDAL models. For the API and IEC models, the
default is for IEC 61400‑1 2\ :sup:`nd` ed. and for IEC 61400‑1
3\ :sup:`rd` ed. The other non-IEC models base this default value on
measured vertical coherence spectra from their respective datasets. The
default *a* parameter for these models is a function of *HubHt* and
*RICH_NO* parameters, as well as the mean hub-height wind speed.

The default *b* parameter for the *u*-component is for the SMOOTH,
USRINP, TIMESR, and TIDAL models. For the API and IEC models, the
default is

(19)

for IEC 61400‑1 2\ :sup:`nd` ed. and

(20)

for IEC 61400‑1 3\ :sup:`rd` ed. (the function denotes the minimum of
the two values). The other non-IEC models calculate the default *b*
parameter as a function of mean hub-height wind speed. The GP_LLJ and
NWTCUP models also use the *RICH_NO* parameter to calculate the default
*b*. Figure 13 shows the default parameters for neutral conditions
(i.e., *RICH_NO* = 0) using a value of 80 m for the *HubHt* parameter.

|image14|

IncDec2: Spatial Coherence for the v-Component Wind Speed [-,
m\ :sup:`-1`]

The *IncDec2* parameter defines the spatial coherence decrement, *a*,
and offset parameter\ *, b*, for the *v*-component wind speed using the
coherence definition of Eq. (18) (with *K = v*). Users can enter
“default” for TurbSim to pick appropriate values for both *a* and *b*,
or enter both *a* and *b* parameters in one set of quotation marks on
the same line. See the discussion for *IncDec1* (above) for further
details.

The default *a* parameter for the *v*-component is for the SMOOTH,
USRINP, TIMESR, and TIDAL models. For the API and IEC models, the
default is a very large number (effectively making this the identity
coherence model). The other non-IEC models calculate the default value
as a function of *HubHt* and *RICH_NO* parameters, as well as the mean
hub-height wind speed.

The default *b* parameter for the *v*-component is for the SMOOTH,
USRINP, TIMESR, TIDAL, API, and IEC models. The other non-IEC models
calculate the default *b* parameter as a function of mean hub-height
wind speed. The GP_LLJ and NWTCUP models also use the RICH_NO parameter
to calculate the default b. Figure 14 shows the default parameters for
neutral conditions using an 80-m HubHt.

|image15|

IncDec3: Spatial Coherence for the w-Component Wind Speed [-,
m\ :sup:`-1`]

The *IncDec3* parameter defines the spatial coherence decrement, *a*,
and offset parameter\ *, b*, for the *w*-component wind speed using the
coherence definition of Eq. (18) (with *K = w*). Users can enter
“default” for TurbSim to pick appropriate values for both *a* and *b*,
or enter both *a* and *b* parameters in one set of quotes on the same
line. See the discussion for *IncDec1* for further details.

The default *a* parameter for the *w*-component is for the SMOOTH,
USRINP, TIMESR, and TIDAL models and (using the default , not the value
entered in *IncDec1*) for the three wind farm models (WF_UPW, WF_07D,
and WF_14D). The GP_LLJ and NWTCUP models calculate the default value as
a function of the *HubHt* and *RICH_NO* parameters, as well as the mean
hub-height wind speed. For the API and IEC models, the default is a very
large number (effectively making this the identity coherence model).

The default *b* parameter for the *w*-component is for the SMOOTH,
USRINP, TIMESR, TIDAL, API, and IEC models and for the three wind farm
models. The GP_LLJ and NWTCUP models calculate the default *b* parameter
as a function of mean hub-height wind speed and the *RICH_NO* parameter.
Figure 15 shows the default parameters for neutral conditions using an
80-m *HubHt*.

|image16|

CohExp: Coherence Exponent [-]

The CohExp parameter is the exponent in the general coherence definition
of Eq. (18). The same value of CohExp is used for all three wind
components (if they are using the GENERAL coherence model); enter a
non-negative number or “default” to use the default value of 0.

Coherent Turbulence Scaling Parameters

The coherent turbulence scaling parameters found in this section are
used with non-IEC atmospheric (non-hydro) spectral models when the
gradient Richardson number (*RICH_NO*) is greater than –0.05 and the
option to create coherent turbulence time-step files has been selected
(i.e., *WrACT *\ = true). Appendix **C** contains a flow chart showing
the functions of the input parameters from this section.

TurbSim uses empirical values to calculate when and how coherent
events—pieces (sections in time) of a Kelvin-Helmholtz (KH) billow
simulated using either direct numerical simulation (DNS) or large-eddy
simulation (LES)—should be added to the background turbulence. It
creates a coherent turbulence time-step file that AeroDyn v13 can read.
The super-positioning of coherent events on the background turbulence
occurs in AeroDyn v13 in the inertial reference frame coordinate system
that AeroDyn v13 uses. The **Coherent Structures** section of this
document discusses this topic further.

CTEventPath: Name of Coherent Turbulence Events path [-]

The *CTEventPath* parameter is the name of the path that contains the
coherent event definition files. Use quotation marks around the path
name. This directory should contain files named “Events.les,”
“Events.dns,” and “Events.xtm” as well as one or more files named
“Event\ *xxxxx*.dat” (with digits replacing the *xxxxx*). These event
definition files and the associated binary data files that AeroDyn v13
reads are provided in the coherent structure archive on the `TurbSim Web
site <http://nwtc.nrel.gov/TurbSim>`__ (in folder “EventData”).

CTEventFile: Type of Coherent Events [-]

This parameter tells TurbSim which type of coherent event files to use.
Valid entries are found in Table 10. In each individual simulation, all
events are of the same type (either all LES or all DNS). TurbSim
automatically uses LES events when KHTEST is specified for parameter
*IECturbc*.

Randomize: Randomize Size and Location of KH Billow Pieces? [T/F]

Set the *Randomize* parameter to “true” to randomize the size and
location of the coherent structures in the rotor disk or to “false” to
specify these values yourself. A value of “true” overrides the next
three input parameters (*DistScl*, *CTLy*, and *CTLz*). Instead, the
coherent structures are centered laterally and randomly chosen to cover
either (1) the full rotor disk (75% of the time), (2) only the lower
half of the disk (12.5% of the time), or (3) only the upper half (12.5%
of the time).

DistScl: Disturbance Scale [-]

The *DistScl* parameter is the disturbance scale, which determines the
size of the coherent event data set relative to the rotor disk. It is
the ratio of the height of the coherent dataset to the (assumed) rotor
diameter. A value of 1.0 makes the coherent structures the height of the
rotor disk; 0.5 makes them half the height of the rotor disk. If
parameter *IECturbc* is KHTEST, TurbSim overrides *DistScl* with a value
of 1.0. When *Randomize* is “true,” the value of this input is
overridden (as discussed above).

CTLy: Lateral Location of Coherent Turbulence [-]

This parameter laterally positions the coherent structures from the KH
billow on the rotor disk. *CTLy* is the fractional location of the tower
centerline from the right to left side (looking downwind) of the
coherent event dataset. A value of 0.5 puts the tower centerline in the
center of the billow. The coherent structures are periodic in the
lateral direction so they cover the grid horizontally, regardless of the
location of the tower centerline. Figure 16 shows coherent structure
scaling with *CTLy* on the abscissa. If parameter *IECturbc* is KHTEST,
TurbSim overrides *CTLy* with a value of 0.5. When *Randomize* is
“true,” the value of this input is overridden (see the discussion of
*Randomize*).

CTLz: Vertical Location of Coherent Turbulence [-]

This parameter positions the coherent structures vertically on the rotor
disk. CTLz is the fractional location of hub height from the bottom of
the dataset. A value of 0.5 places the vertical center of the billow at
hub height. The structures are constant above and below the top and
bottom of the dataset. Figure 16 shows how the structures are scaled. If
parameter IECturbc is KHTEST, TurbSim overrides CTLz with a value of
0.5. When Randomize is “true,” the value of this input also is
overridden (see the discussion of Randomize).

|image17|

CTStartTime: Minimum Start Time for Coherent Turbulence [s]

The *CTStartTime* parameter is used to determine where the first
coherent structure will be placed in the time-step file. TurbSim ensures
that the first event in the coherent time-step file does not occur
before the time entered here (in seconds). This feature can be useful if
you do not want a turbine to encounter coherent structures during the
startup transient of a simulation.

Input File for User-Defined Time Series

When using the “TIMESR” turbulence model, TurbSim requires additional
inputs, which are specified in the User-Defined Time Series Input File.
The name of this file is specified in the *UsrFile* input parameter in
the primary TurbSim input file. An example of a User-Defined Time-Series
input file is shown in Figure A-2.

nComp: Number of Velocity Components in the File [1, 2, or 3]

This parameter is used to determine what columns are in the Time Series
table at the end of this input file. If *nComp* is “1”, the file
contains only the U-component wind speeds. If *nComp* is “2”, the file
contains only the *U*- and *V*- components of the total wind speed. If
*nComp* is “3”, the file contains all three (*U, V, W*) wind components.

Currently if *nComp* is less than 3, TurbSim generates zeros for the
missing components.

nPoints: Number of Time Series Points in the File [-]

This parameter tells TurbSim how many measurement locations are stored
in this file. *nPoints* must be at least 1.

RefPtID: Index of the Reference Point [-]

The *RefPtID* parameter is a number between 1 and *nPoints*. It is the
index of the measurement point whose phase angles will be used to
correlate with the simulated points (i.e., it will be the first point
used to form Veers’ [28] transformation matrix, H).

Pointyi, Pointzi: Coordinate Locations of Time Series Points in the File
[m, m]

This is a table listing the coordinates of the measurement locations
contained in this file. These coordinates must be defined in the
inertial reference frame with origin at the ground level and the
undisplaced tower centerline. This table has two columns: the first
contains the *Y* (lateral) coordinate, and the second contains the *Z*
(vertical) coordinate. There are *nPoints* rows of data in the table,
one for each measurement location. The locations must be entered in
order of increasing height.

Time Series

This table lists the time series values. TurbSim uses the raw
time-series data entered in this file, so make sure you have processed
the data before using it here. It is recommended that all of these time
series be rotated in the direction of *RefPtID*, so that the horizontal
and vertical directions at *RefPtID* are 0, but that any other points
contain a direction profile relative to the reference point.

The first column in the table is the elapsed time. The remaining columns
are wind speeds at the given time. The first *nComp* columns after the
time column are the wind components (in the order *U*, *V*, *W*) for the
first point entered in the coordinate location table. The next *nComp*
are for the second point in the coordinate location table, and so forth.

The columns must be in order of the positions listed in the coordinate
location table, and the time between each entry (Δt) must be constant.

Input File for User-Defined Spectra

When using the “USRINP” turbulence model, TurbSim requires additional
inputs, which are specified in the User-Defined Spectra Input File. The
name of this file is specified in the *UsrFile* input parameter in the
primary TurbSim input file. An example User-Defined Spectra input file
is shown in Figure A-3.

NumUSRf: Number of frequencies [-]

The *NumUSRf* input determines how many rows TurbSim will read from the
spectra table in this file. If the table contains more than *NumUSRf*
rows, the additional rows are ignored, which can give unexpected results
in the generated time series.

SpecScale1: Scaling factor for the input u-component spectrum [-]

*SpecScale1* is a constant that TurbSim uses to multiply the
*u*-component PSD column in the Spectra table of this file to obtain the
desired longitudinal-component velocity spectra in given a simulation.
This scaling factor can be used—for example—to modify the target
standard deviation for the *u-*\ component without changing all of the
values in the *u* column of the Spectra table.

SpecScale2: Scaling factor for the input v-component spectrum [-]

*SpecScale2* is a constant that TurbSim uses to multiply the
*v*-component PSD column in the Spectra table of this file to obtain the
desired lateral-component velocity spectra in given a simulation. This
scaling factor can be used—for example— to modify the target standard
deviation for the *v-*\ component without changing all of the values in
the *v* column of the Spectra table.

SpecScale3: Scaling factor for the input w-component spectrum [-]

*SpecScale3* is a constant that TurbSim uses to multiply the
*w*-component PSD column in the Spectra table of this file to obtain the
desired vertical-component velocity spectra in given a simulation. This
scaling factor can be used—for example— to modify the target standard
deviation for the *w-*\ component without changing all of the values in
the *w* column of the Spectra table.

Spectra

This table lists the spectra that will be used uniformly over the
simulation (Y-Z) grid. There are four columns in this table:

1. Frequency (Hz)

2. *u*-component PSD (m^2/s)

3. *v*-component PSD (m^2/s)

4. *w*-component PSD (m^2/s)

The frequencies must be unique, but TurbSim will sort them into
increasing order if they are not entered that way. The “Spectral Models”
section of this document describes how these input values are used in
simulation.

Input file for User-Defined Profiles

When using the “USRVKM” turbulence model or the “USR” wind profile type,
TurbSim requires additional inputs, which are specified in the
User-Defined Profiles Input File. The name of this file is specified in
the *ProfileFile* input parameter in the primary TurbSim input file. An
example User-Defined Profile input file is shown in Figure A-4.

NumUSRz: Number of heights [-]

The *NumUSRz* input determines how many rows TurbSim will read from the
Profile table in this file. If the table contains more than *NumUSRz*
rows, the additional rows are ignored, which can give unexpected results
in the generated time series.

StdScale1: Scaling factor for the input standard deviation (“USRVKM”
only) [-]

*StdScale1* is a constant that TurbSim uses in the “ÚSRVKM” turbulence
model to scale the standard deviation column of the Profiles table for
the *u-*\ component spectra. It is ignored with all other turbulence
models.

StdScale2: Scaling factor for the input standard deviation [-]

*StdScale2* is a constant that TurbSim uses in the “ÚSRVKM” turbulence
model to scale the standard deviation column of the Profiles table for
the *v-*\ component spectra. It is ignored with all other turbulence
models.

StdScale3: Scaling factor for the input standard deviation [-]

*StdScale3* is a constant that TurbSim uses in the “ÚSRVKM” turbulence
model to scale the standard deviation column of the Profiles table for
the *w-*\ component spectra. It is ignored with all other turbulence
models.

Profiles

This table lists the user-defined profiles that will be used in TurbSim
when using the “USRVKM” turbulence model or the “USR” wind profile type.
The columns are

1. Height (m)

2. Wind speed (m/s)

3. Wind direction (degrees, measured counter-clockwise from above)

4. Standard deviation (m/s), read and used only when
   *TurbModel* = “USRVKM”

5. Length scale (m) , read and used only when *TurbModel* = “USRVKM”

TurbSim will read *NumUSRz* rows from this table. Note that the last two
columns are read *only* when *TurbModel* = “USRVKM”.